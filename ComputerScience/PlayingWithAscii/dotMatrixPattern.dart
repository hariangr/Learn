// A challange I guess
// Kinda a challange that my prof said during class
// Well, I can implement it relatively easily, so I DID
//
// Inspired by https://www.youtube.com/watch?v=7Jr0SFMQ4Rs&list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo&index=24
// Dot Matrix inspired from https://previews.123rf.com/images/maxkrasnov/maxkrasnov1006/maxkrasnov100600132/7101756-dot-matrix-display-with-alphabet-and-numbers.jpg

import 'dart:io';

/// A simple class to create a dot matrix representation of a character
/// 
/// Written by Hari Anugrah (@hariangr) on October 2019
/// [Hari Anugrah on Web](https://harianugrah.com)
class DotMatrixPattern {
  /// The character to put in place for ON pixel.
  String charWhite = "█"; // UNICODE u2588
  /// The character to put in place for OFF pixel.
  String charBlack = " ";

  /// The horizontal pixel length of a character.
  int widthLength = 5;

  /// The vertical pixel length of a character.
  int heightLength = 7;

  /// The datasets table to map character into pixel matrix (Dot Matrix)
  Map<String, List<List<int>>> asciiTable = {
    " ": [
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
    ],
    "A": [
      [0, 0, 1, 1, 1],
      [0, 1, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 1, 1, 1, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
    ],
    "B": [
      [1, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 1, 1, 1, 0],
    ],
    "C": [
      [0, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "D": [
      [1, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 1, 1, 1, 0],
    ],
    "E": [
      [1, 1, 1, 1, 1],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 1, 1, 1, 0],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 1, 1, 1, 1],
    ],
    "F": [
      [1, 1, 1, 1, 1],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 1, 1, 1, 0],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
    ],
    "G": [
      [0, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 1, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "H": [
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 1, 1, 1, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
    ],
    "I": [
      [0, 1, 1, 1, 0],
      [0, 0, 1, 0, 0],
      [0, 0, 1, 0, 0],
      [0, 0, 1, 0, 0],
      [0, 0, 1, 0, 0],
      [0, 0, 1, 0, 0],
      [0, 1, 1, 1, 0],
    ],
    "J": [
      [0, 0, 1, 1, 1],
      [0, 0, 0, 0, 1],
      [0, 0, 0, 0, 1],
      [0, 0, 0, 0, 1],
      [0, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "K": [
      [1, 0, 0, 0, 1],
      [1, 0, 0, 1, 0],
      [1, 0, 1, 0, 0],
      [1, 1, 0, 0, 0],
      [1, 0, 1, 0, 0],
      [1, 0, 0, 1, 0],
      [1, 0, 0, 0, 1],
    ],
    "L": [
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 1, 1, 1, 1],
    ],
    "M": [
      [1, 0, 0, 0, 1],
      [1, 1, 0, 1, 1],
      [1, 0, 1, 0, 1],
      [1, 0, 1, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
    ],
    "N": [
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 1, 0, 0, 1],
      [1, 0, 1, 0, 1],
      [1, 0, 0, 1, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
    ],
    "O": [
      [0, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "P": [
      [1, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 1, 1, 1, 0],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 0, 0, 0, 0],
    ],
    "Q": [
      [0, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
      [0, 0, 0, 0, 1],
    ],
    "R": [
      [1, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 1, 1, 1, 0],
      [1, 0, 1, 0, 0],
      [1, 0, 0, 1, 0],
      [1, 0, 0, 0, 1],
    ],
    "S": [
      [0, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 0],
      [0, 1, 1, 1, 0],
      [0, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "T": [
      [1, 1, 1, 1, 1],
      [0, 0, 1, 0, 0],
      [0, 0, 1, 0, 0],
      [0, 0, 1, 0, 0],
      [0, 0, 1, 0, 0],
      [0, 0, 1, 0, 0],
      [0, 0, 1, 0, 0],
    ],
    "U": [
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "V": [
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 0, 1, 0],
      [0, 0, 1, 0, 0],
    ],
    "W": [
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 1, 0, 1],
      [1, 0, 1, 0, 1],
      [0, 1, 0, 1, 0],
    ],
    "X": [
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 0, 1, 0],
      [0, 0, 1, 0, 0],
      [0, 1, 0, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
    ],
    "Y": [
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 1],
      [0, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "Z": [
      [1, 1, 1, 1, 1],
      [0, 0, 0, 0, 1],
      [0, 0, 0, 1, 0],
      [0, 0, 1, 0, 0],
      [0, 1, 0, 0, 0],
      [1, 0, 0, 0, 0],
      [1, 1, 1, 1, 1],
    ],
    "1": [
      [0, 0, 1, 0, 0],
      [0, 1, 1, 0, 0],
      [1, 0, 1, 0, 0],
      [0, 0, 1, 0, 0],
      [0, 0, 1, 0, 0],
      [0, 0, 1, 0, 0],
      [1, 1, 1, 1, 1],
    ],
    "2": [
      [0, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [0, 0, 0, 0, 1],
      [0, 0, 0, 1, 0],
      [0, 0, 1, 0, 0],
      [0, 1, 0, 0, 0],
      [1, 1, 1, 1, 1],
    ],
    "3": [
      [0, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [0, 0, 0, 0, 1],
      [0, 0, 1, 1, 0],
      [0, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "4": [
      [0, 0, 0, 1, 0],
      [0, 0, 1, 1, 0],
      [0, 1, 0, 1, 0],
      [1, 0, 0, 1, 0],
      [1, 1, 1, 1, 1],
      [0, 0, 0, 1, 0],
      [0, 0, 0, 1, 0],
    ],
    "5": [
      [1, 1, 1, 1, 1],
      [1, 0, 0, 0, 0],
      [1, 1, 1, 1, 0],
      [0, 0, 0, 0, 1],
      [0, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "6": [
      [0, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 0],
      [1, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "7": [
      [1, 1, 1, 1, 1],
      [0, 0, 0, 0, 1],
      [0, 0, 0, 1, 0],
      [0, 0, 1, 0, 0],
      [0, 1, 0, 0, 0],
      [0, 1, 0, 0, 0],
      [0, 1, 0, 0, 0],
    ],
    "8": [
      [0, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "9": [
      [0, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 1],
      [0, 0, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "0": [
      [0, 1, 1, 1, 0],
      [1, 0, 0, 0, 1],
      [1, 0, 0, 1, 1],
      [1, 0, 1, 0, 1],
      [1, 1, 0, 0, 1],
      [1, 0, 0, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "_": [
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1],
    ],
    "\$": [
      [0, 1, 1, 1, 0],
      [1, 0, 1, 0, 1],
      [1, 0, 1, 0, 0],
      [0, 1, 1, 1, 0],
      [0, 0, 1, 0, 1],
      [1, 0, 1, 0, 1],
      [0, 1, 1, 1, 0],
    ],
    "%": [
      [1, 1, 0, 0, 0],
      [1, 1, 0, 0, 1],
      [0, 0, 0, 1, 0],
      [0, 0, 1, 0, 0],
      [0, 1, 0, 0, 0],
      [1, 0, 0, 1, 1],
      [0, 0, 0, 1, 1],
    ],
    ",": [
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 1, 1, 0, 0],
      [0, 0, 1, 0, 0],
      [0, 1, 0, 0, 0],
    ],
    ".": [
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 1, 1, 0, 0],
      [0, 1, 1, 0, 0],
    ],
    "!": [
      [0, 1, 0, 0, 0],
      [0, 1, 0, 0, 0],
      [0, 1, 0, 0, 0],
      [0, 1, 0, 0, 0],
      [0, 1, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 1, 0, 0, 0],
    ],
    "?": [
      [0, 1, 1, 0, 0],
      [1, 0, 0, 1, 0],
      [0, 0, 0, 1, 0],
      [0, 0, 1, 0, 0],
      [0, 1, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 1, 0, 0, 0],
    ],
    "(": [
      [0, 0, 0, 0, 1],
      [0, 0, 0, 1, 0],
      [0, 0, 0, 1, 0],
      [0, 0, 0, 1, 0],
      [0, 0, 0, 1, 0],
      [0, 0, 0, 1, 0],
      [0, 0, 0, 0, 1],
    ],
    ")": [
      [1, 0, 0, 0, 0],
      [0, 1, 0, 0, 0],
      [0, 1, 0, 0, 0],
      [0, 1, 0, 0, 0],
      [0, 1, 0, 0, 0],
      [0, 1, 0, 0, 0],
      [1, 0, 0, 0, 0],
    ],
    "-": [
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 1, 1, 1, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
    ],
  };

  bool _intToBool(int i) {
    if (i == 1) return true;
    return false;
  }

  /// Print the [row] index of [asciiTable]
  ///
  /// ```dart
  /// _printRow("A", 0);
  /// ```
  /// Output would be "  ███"
  void _printRow(String chara, int row) {
    for (var i = 0; i < widthLength; i++) {
      bool _isW = _intToBool(asciiTable[chara][row][i]);

      if (_isW) {
        stdout.write(charWhite);
      } else {
        stdout.write(charBlack);
      }
    }
  }

  /// Print dot matrixed string without splitting it into multiple line
  ///
  /// If the dot matrix is longer than the terminal width, then terminal will
  /// automatically wrap it, causing it to look broken
  /// Prefer to use [printStringWrapped] to automatically split it into
  /// multiple line
  void printStringMatrix(String src) {
    List<String> _charaSrc = src.toUpperCase().split("");

    for (var i = 0; i < heightLength; i++) {
      for (var j = 0; j < _charaSrc.length; j++) {
        _printRow(_charaSrc[j], i);
        stdout.write(charBlack);
      }

      stdout.write("\n");
    }
  }

  /// Print dot matrixed long string and automatically split it into multiple line
  ///
  /// If the [src] is longer than [lineWidth] than the overflow will be written
  /// automatically on the nextline.
  /// If [autoLineSeperation] is true then between line will be added an
  /// empty line to make line seperation clearer
  void printStringWrapped(
    String src, {
    int lineWidth = 15,
    bool autoLineSeperation = true,
  }) {
    int _lines = (src.length / lineWidth).ceil();

    for (var i = 0; i < _lines; i++) {
      var _offset = i * lineWidth;
      var _endOffset =
          (_offset + lineWidth) < src.length ? _offset + lineWidth : src.length;
      printStringMatrix(src.substring(_offset, _endOffset));

      if (autoLineSeperation && i != _lines - 1) stdout.write("\n");
    }
  }
}

void main() {
  DotMatrixPattern().printStringMatrix("ABCDEFGHIJKLMNOPQRSTUVWX");

  // printStringWrapped("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  // print("");
  // print("");
  // printStringWrapped("hari anugrah");
  // print("");
  // print("");
  // printStringWrapped("1234567890");
  // print("");
  // print("");
  // printStringWrapped("_%,.!?()-\$");
}

//   ███ ████   ███  ████  █████ █████  ███  █   █  ███    ███ █   █ █     █   █ █   █  ███
//  █  █ █   █ █   █ █   █ █     █     █   █ █   █   █       █ █  █  █     ██ ██ █   █ █   █
// █   █ █   █ █     █   █ █     █     █     █   █   █       █ █ █   █     █ █ █ ██  █ █   █
// █   █ ████  █     █   █ ████  ████  █     █████   █       █ ██    █     █ █ █ █ █ █ █   █
// █████ █   █ █     █   █ █     █     █  ██ █   █   █       █ █ █   █     █   █ █  ██ █   █
// █   █ █   █ █   █ █   █ █     █     █   █ █   █   █   █   █ █  █  █     █   █ █   █ █   █
// █   █ ████   ███  ████  █████ █      ███  █   █  ███   ███  █   █ █████ █   █ █   █  ███

// ████   ███  ████   ███  █████ █   █ █   █ █   █ █   █ █   █ █████
// █   █ █   █ █   █ █   █   █   █   █ █   █ █   █ █   █ █   █     █
// █   █ █   █ █   █ █       █   █   █ █   █ █   █  █ █  █   █    █
// ████  █   █ ████   ███    █   █   █ █   █ █   █   █    ████   █
// █     █   █ █ █       █   █   █   █ █   █ █ █ █  █ █      █  █
// █      ███  █  █  █   █   █   █   █  █ █  █ █ █ █   █ █   █ █
// █         █ █   █  ███    █    ███    █    █ █  █   █  ███  █████

// █   █   ███ ████   ███          ███ █   █ █   █  ███  ████    ███ █   █
// █   █  █  █ █   █   █          █  █ █   █ █   █ █   █ █   █  █  █ █   █
// █   █ █   █ █   █   █         █   █ ██  █ █   █ █     █   █ █   █ █   █
// █████ █   █ ████    █         █   █ █ █ █ █   █ █     ████  █   █ █████
// █   █ █████ █ █     █         █████ █  ██ █   █ █  ██ █ █   █████ █   █
// █   █ █   █ █  █    █         █   █ █   █ █   █ █   █ █  █  █   █ █   █
// █   █ █   █ █   █  ███        █   █ █   █  ███   ███  █   █ █   █ █   █

//   █    ███   ███     █  █████  ███  █████  ███   ███   ███
//  ██   █   █ █   █   ██  █     █   █     █ █   █ █   █ █   █
// █ █       █     █  █ █  ████  █        █  █   █ █   █ █  ██
//   █      █    ██  █  █      █ ████    █    ███   ████ █ █ █
//   █     █       █ █████     █ █   █  █    █   █     █ ██  █
//   █    █    █   █    █  █   █ █   █  █    █   █ █   █ █   █
// █████ █████  ███     █   ███   ███   █     ███   ███   ███

//       ██                 █     ██       █ █            ███
//       ██  █              █    █  █     █   █          █ █ █
//          █               █       █     █   █          █ █
//         █                █      █      █   █     ███   ███
//        █     ██          █     █       █   █            █ █
//       █  ██   █    ██                  █   █          █ █ █
// █████    ██  █     ██    █     █        █ █            ███
